import datetime
import json
import re
import textwrap
from io import BytesIO

import async_cse
import discord
import wikipedia
import youtube_dl as ytdl
from discord.ext import commands
from discord.ext.commands import BucketType
from utils.errors import NoAPIKey
from utils.paginator import Paginator
from utils.functions import convert_sec_to_min
from youtubesearchpython.__future__ import VideosSearch


async def a(m: discord.Message):
    await m.delete()


class Search(commands.Cog):
    """For searching for things in the world wide web :^)"""

    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="wikipedia", aliases=["wiki", "searchwiki"])
    async def _wikipedia(self, ctx, *, search_term):
        """Searches wikipedia for specific search term"""
        result = wikipedia.summary(search_term)

        paginator = commands.Paginator(prefix="", suffix="", max_size=750)
        for line in result.split("\n"):
            paginator.add_line(line)

        embeds = []
        for page in paginator.pages:
            embeds.append(discord.Embed(title=search_term, description=page))

        menu = Paginator(embeds)
        await menu.start(ctx)

    @commands.command(aliases=["search", "g"])
    @commands.cooldown(1, 5, BucketType.user)
    async def google(self, ctx, *, search_term: commands.clean_content):
        """Searches google for specific search term"""

        try:
            results = await ctx.bot.google_api.search(
                search_term,
                safesearch=not ctx.channel.is_nsfw() if ctx.guild else False,
            )
        except async_cse.search.NoResults:
            return await ctx.send(
                "No search results found. "
                + (
                    "Perhaps, the results were nsfw, go to a nsfw channel and use this command again and see"
                    if (not ctx.channel.is_nsfw() if ctx.guild else False)
                    else ""
                )
            )

        embeds = []
        for result in results:
            embed = discord.Embed(
                title=result.title,
                description=result.description,
                url=result.url,
                color=0x2F3136, # invisible color
            )
            # Sometimes the images are invalid so we are just validating that
            if re.match(r"(http(s?):)(.)*\.(?:jpg|gif|png)", result.image_url):
                embed.set_thumbnail(url=result.image_url)
            embeds.append(embed)

        menu = Paginator(embeds)
        await menu.start(ctx)

    @commands.command(aliases=["fakeperson", "fp", "thispersondoesnotexist", "tpdne"])
    async def fake_person(self, ctx):
        """Sends the image of a fake person generated by AI"""

        async with self.bot.session.get("https://thispersondoesnotexist.com/image") as response:
            resp = await response.read()
            file = discord.File(BytesIO(resp), filename="fake_person.png")

        embed = discord.Embed(title="This person does not exist", url="https://thispersondoesnotexist.com")
        embed.set_image(url="attachment://fake_person.png")
        embed.set_footer(text="Randomly generates a person. go to https://thispersondoesnotexist.com to find more info")

        await ctx.send(embed=embed, file=file)

    @commands.command(aliases=["randomimage", "rndi", "randompicture", "randompic", "rp"])
    async def random_image(self, ctx, vertical: bool = False):
        """Sends a random image, if vertical is True, sends a vertical image"""
        async with self.bot.session.get(
            "https://picsum.photos/1920/1080" if not vertical else "https://picsum.photos/1080/1920"
        ) as response:
            resp = await response.read()
            file = discord.File(BytesIO(resp), filename="random_picture.png")

        await ctx.send(
            embed=discord.Embed(title="A random picture :)", url="https://picsum.photos").set_image(
                url="attachment://random_picture.png"
            ),
            file=file,
        )

    @commands.command(
        aliases=["imagesearch", "is", "i"],
    )
    @commands.cooldown(1, 5, BucketType.user)
    async def image(self, ctx, *, search_term: commands.clean_content):
        """Searched google for the image, uses [google image search](https://images.google.com)"""
        try:
            results = await ctx.bot.google_api.search(
                search_term,
                safesearch=not ctx.channel.is_nsfw() if ctx.guild else False,
                image_search=True,
            )
        except async_cse.search.NoResults:
            return await ctx.send(
                "No images found. "
                + (
                    "Perhaps, the results were nsfw, go to a nsfw channel and use this command again and see"
                    if (not ctx.channel.is_nsfw() if ctx.guild else False)
                    else ""
                )
            )

        embeds = []
        for result in results:
            embed = discord.Embed(title=result.title, url=result.url, color=0x2F3136)
            embed.set_image(url=result.image_url)
            embeds.append(embed)

        menu = Paginator(embeds)
        await menu.start(ctx)

    @commands.command(aliases=["yt"])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def youtube(self, ctx, *, text):
        """Searches youtube for specific title"""
        search = VideosSearch(text, limit=10)

        results = (await search.next())["result"]
        if len(results) == 0:
            await ctx.message.reply("No Results")

        embedlist = []
        for video in results:
            # This check exists because the search also returns channels, playlists etc.
            if video["type"] != "video":
                continue
            embed = discord.Embed(title=video["title"], description=video["link"])
            embed.set_image(url=video["thumbnails"][0]["url"])
            embed.set_author(
                name=video["channel"]["name"],
                url=video["channel"]["link"],
                icon_url=video["channel"]["thumbnails"][0]["url"],
            )
            embed.add_field(name="Published", value=video["publishedTime"], inline=False)
            embed.add_field(name="Duration", value=video["duration"], inline=False)
            embed.add_field(
                name="Views",
                value=f'{video["viewCount"]["short"]}({video["viewCount"]["text"]})',
                inline=False,
            )
            embedlist.append(embed)

        pag = Paginator(embedlist)
        await pag.start(ctx)

    @commands.command(aliases=["tenor"])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def gif(self, ctx, *, query: str):
        """Sends a gif from tenor"""
        apikey = self.bot.api_keys.get("tenor")
        if not apikey:
            raise NoAPIKey
        search_term = query

        async with self.bot.session.get(
            f"https://api.tenor.com/v1/search",
            params={'q': search_term, 'key': apikey, 'contentfilter':'high'}
        ) as response:
            gifs = json.loads(await response.text())
            gif = gifs["results"][0]["media"][0]["gif"]["url"]

        embed = discord.Embed(color=0x2F3136)
        embed.set_image(url=gif)
        embed.add_field(
            name="Link (click to see or long press to copy)",
            value=f"[click here]({gif})",
        )
        embed.set_footer(text=f"Asked by {ctx.author}")

        await ctx.send(embed=embed)

    @commands.command(aliases=["yti","ytinfo","youtubei","videoinfo","youtubevideoinfo","ytvi","vi"])
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def youtubeinfo(self, ctx, video_url: str):
        with ytdl.YoutubeDL({}) as ydl:
            infos = ydl.extract_info(video_url, download=False)

        description = textwrap.shorten(infos["description"], width=400, placeholder="...")
        time = datetime.datetime.strptime(infos["upload_date"], "%Y%m%d")

        embed = discord.Embed(title=infos["title"], description=description, color=16711680)
        embed.set_author(name=infos["uploader"], url=infos["uploader_url"])
        embed.set_image(url=infos["thumbnails"][-1]["url"])
        embed.add_field(name="View Count", value=f"{infos['view_count']:,}")
        embed.add_field(name="Uploaded On", value=time.strftime("%d %B, %Y"))
        embed.add_field(name="Duration", value=convert_sec_to_min(infos["duration"]))
        if infos["age_limit"]:
            embed.add_field(
                name="Age Restriction",
                value=f"You must be {infos['age_limit']} or older in order to see this video",
            )
        if infos["categories"]:
            embed.add_field(name="Category", value="\n".join(infos["categories"]))
        if infos["tags"]:
            tags = "".join([f"`{i}`, " for i in infos["tags"]][:-3])
            embed.add_field(name="Tags/Keywords", value=tags)
        if infos["average_rating"]:
            embed.add_field(name="Likes", value=str(round(infos["average_rating"] * 20, 2)) + "%")
        embed.add_field(
            name="Video Info",
            value=f"Video Quality: {infos['width']}x{infos['height']}@{infos['fps']}p\nVideo Codec: {infos['vcodec']}\nVideo File Extension: `.{infos['ext']}`",
        )
        embed.add_field(
            name="Audio Info",
            value=f"Audio Bitrate: {infos['abr']}Kbps\nAudio Codec: {infos['acodec']}",
        )

        await ctx.send(embed=embed)


def setup(bot):
    """Adds the cog to the bot"""
    bot.add_cog(Search(bot))
